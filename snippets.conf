# Geany's snippets configuration file
#
# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step, it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion. You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list.
#
# Additionally, you can use most of the template wildcards like {developer}, {command:...},
# or {date} in the snippets.
# See the documentation for details.

# For a list of available filetype names, execute:
# geany --ft-names

# Default is used for all filetypes and keys can be overwritten by [filetype] sections
[Default]

# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars
[Special]
#brace_open=\n{\n\t
#brace_close=}\n
#block=\n{\n\t%cursor%\n}
#block_cursor=\n{\n\t%cursor%\n}
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Optional keybindings to insert snippets
# Note: these can be overridden by Geany's configurable keybindings
[Keybindings]
#for=<Ctrl>7

[C]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
main=int main() {\n\t%cursor%\n\treturn 0;\n}\n
func=%returntype% %cursor%(%params%) {\n\t\n}\n
if=if (%cursor%) {\n\t\n}\n
else=else {\n\t\n}\n
for=for (int %cursor% = 0; %cursor% < %cursor%; %cursor%++) {\n\t\n}\n
while=while (%cursor%) {\n\t\n}\n
do=do {\n\t\n} while (%cursor%);\n
switch=switch (%cursor%) {\n\tcase %cursor%:\n\t\t\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}\n
printf=printf("%cursor%\n");\n
scanf=scanf("%cursor%", &%cursor%);\n
struct=struct %cursor% {\n\t%cursor%\n};\n
typedef=typedef %cursor% %cursor%;\n

[C++]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (int i = 0; i < %cursor%; ++i)%brace_open%\n%brace_close%
while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%
cout=cout << %cursor% << endl;
cin=cin>>%cursor%;
forj=for (int j = 0; j < %cursor%; ++j)%brace_open%\n%brace_close%
cp=#include <bits/stdc++.h>\nusing namespace std;\n\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<pii> vpii;\ntypedef vector<pll> vpll;\n\n#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)\n#define endl '\\n'\n#define pb push_back\n#define mp make_pair\n#define FOREACH(it, l) for (auto it = l.begin(); it != l.end(); it++)\n\nvoid solve() {\n\tint n;\n\tcin >> n;\n\t\n}\n\nint main() {\n\tfastio;\n\t// Uncomment the following line if you want to use file I/O\n\t// freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);\n\tint t = 1;\n\tcin >> t;\n\twhile (t--) {\n\t\tsolve();\n\t}\n\treturn 0;\n}
main=#include <bits/stdc++.h>\nusing namespace std;\n\nint main()\n{\n%cursor%\n}

[Java]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (int i = 0; i < %cursor%; i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%
[Java]
main=public static void main(String[] args) {\n\t| \n}
class=public class %cursor% {\n\tpublic static void main(String[] args) {\n\t\t| \n\t}\n}
sysout=System.out.println(|);
psvm=public static void main(String[] args) {\n	%cursor%\n}\n
class=public class %cursor% {\n	public static void main(String[] args) {\n\t\t\n	}\n}\n
method=public %cursor% %methodname%(%params%) {\n\t\n}\n
if=if (%cursor%) {\n\t\n}\n
else=else {\n\t\n}\n
for=for (int %cursor% = 0; %cursor% < %cursor%; %cursor%++) {\n\t\n}\n
foreach=for (%cursor% : %cursor%) {\n\t\n}\n
while=while (%cursor%) {\n\t\n}\n
do=do {\n\t\n} while (%cursor%);\n
switch=switch (%cursor%) {\n\tcase %cursor%:\n\t\t\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}\n
try=try {\n\t\n} catch (%cursor%) {\n\t\n}\n

scanner=Scanner %cursor% = new Scanner(System.in);\n
sout=System.out.println(%cursor%);\n
soutf=System.out.printf(%cursor%);\n
getter=public %cursor% get%cursor%() {\n\treturn %cursor%;\n}\n
setter=public void set%cursor%(%cursor%) {\n\tthis.%cursor% = %cursor%;\n}\n


[PHP]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for ($i = 0; $i < %cursor%; $i++)%brace_open%\n%brace_close%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Javascript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[C#]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Vala]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[ActionScript]
#if=if (%cursor%)%block_cursor%
#else=else%block_cursor%
#for=for (i = 0; i < %cursor%; i++)%block_cursor%
#while=while (%cursor%)%block_cursor%
#do=do\n{\n\t%cursor%\n} while (%cursor%)\n
#switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%
#try=try%block%\ncatch (%cursor%)%block_cursor%

[Python]
main=if __name__ == "__main__":\n\t%cursor%\n
def=def %cursor%(%cursor%):\n\t\n\treturn \n
class=class %cursor%:\n\tdef __init__(self, %cursor%):\n\t\t\n
if=if %cursor%:\n\t\n
elif=elif %cursor%:\n\t\n
else=else:\n\t\n
for=for %cursor% in range(%cursor%):\n\t\n
while=while %cursor%:\n\t\n
try=try:\n\t\nexcept %cursor% as e:\n\t\n
with=with %cursor% as %cursor%:\n\t\n
print=print(%cursor%)\n
input=input(%cursor%)\n
listcomp=[%cursor% for %cursor% in %cursor%]\n
dictcomp={%cursor%: %cursor% for %cursor% in %cursor%}\n
lambda=lambda %cursor%: %cursor%

[Haskell]

[HTML]
#table=<table>\n\t<tr>\n\t\t<td>%cursor%</td>\n\t</tr>\n</table>

[Erlang]
#case=case %cursor% of\n\t%cursor% -> %cursor%\nend
#if=if\n\t%cursor% -> %cursor%\nend
#begin=begin\n\t%cursor%\nend
#fun=fun(%cursor%) ->\n\t%cursor%\nend
#try=try %cursor% of\n\t%cursor% ->\n\t%cursor%\ncatch\n\t%cursor% ->\n\t%cursor%\nend
#module=-module(%cursor%).
#export=-export(%cursor%).
#compile=-compile(%cursor%).
#include=-include(%cursor%).
